<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on mjt</title>
    <link>https://matthewturk.github.io/post/</link>
    <description>Recent content in Posts on mjt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://matthewturk.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Loading data in yt: Can we make it better?</title>
      <link>https://matthewturk.github.io/post/loading_data_in_yt/</link>
      <pubDate>Mon, 01 Jul 2019 14:47:41 -0500</pubDate>
      
      <guid>https://matthewturk.github.io/post/loading_data_in_yt/</guid>
      <description>In this blogpost, I walk through the annoying bits about loading unknown data into yt.</description>
    </item>
    
    <item>
      <title>Whole Tale: Exploration, Analysis and Reproducibility</title>
      <link>https://matthewturk.github.io/post/exploration-whole-tale/</link>
      <pubDate>Fri, 28 Jun 2019 10:32:44 -0500</pubDate>
      
      <guid>https://matthewturk.github.io/post/exploration-whole-tale/</guid>
      <description>What is this Whole Tale thing?</description>
    </item>
    
    <item>
      <title>Kaitai Struct and Scientific Data</title>
      <link>https://matthewturk.github.io/post/kaitai-struct-scientific-data/</link>
      <pubDate>Thu, 20 Jun 2019 13:15:41 -0500</pubDate>
      
      <guid>https://matthewturk.github.io/post/kaitai-struct-scientific-data/</guid>
      <description>tl;dr: kaitai struct is awesome.
File formats can be pretty annoying &amp;ndash; especially when you figure them out through weird combinations of reverse-engineering, hand-me-down code and trial-and-error.
What we&amp;rsquo;ve ended up with in yt is a bunch of data formats where the process of conducting the IO is all mixed up with the description of that IO. This means that any attempt to update things (which I&amp;rsquo;ve alluded to in these blog posts) requires a fair bit of care to make sure that the process is not disruptive in any way.</description>
    </item>
    
    <item>
      <title>Refactoring yt Frontends - Part 3</title>
      <link>https://matthewturk.github.io/post/refactoring-yt-frontends-part3/</link>
      <pubDate>Mon, 17 Jun 2019 22:32:09 -0400</pubDate>
      
      <guid>https://matthewturk.github.io/post/refactoring-yt-frontends-part3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Refactoring yt Frontends - Part 2</title>
      <link>https://matthewturk.github.io/post/refactoring-yt-frontends-part2/</link>
      <pubDate>Mon, 10 Jun 2019 12:59:33 -0500</pubDate>
      
      <guid>https://matthewturk.github.io/post/refactoring-yt-frontends-part2/</guid>
      <description>SIDE NOTE: I intended for this blog post to be a bit shorter than it turned out, and for it to cover some things it &amp;hellip; didn&amp;rsquo;t! So it looks like there&amp;rsquo;ll be a part three in the series.
Operations on Data Objects In my previous post, I walked through a few aspects of how the chunking system in yt works, mostly focusing on the &amp;quot;io&amp;quot; style of chunking, where the order in which data arrives is not important.</description>
    </item>
    
    <item>
      <title>Refactoring yt Frontends - Part 1</title>
      <link>https://matthewturk.github.io/post/refactoring-yt-frontends-part1/</link>
      <pubDate>Fri, 31 May 2019 17:06:12 -0500</pubDate>
      
      <guid>https://matthewturk.github.io/post/refactoring-yt-frontends-part1/</guid>
      <description>The first post in a deep dive into yt frontends, chunking, and why and how they might be refactored.</description>
    </item>
    
  </channel>
</rss>